{"version":3,"sources":["actions/actionTypes.jsx","actions/actionCreators.jsx","components/ServiceAdd.jsx","components/ServiceList.jsx","App.js","serviceWorker.js","reducers/serviceList.jsx","reducers/serviceAdd.jsx","store/index.js","index.js"],"names":["ADD_SERVICE","REMOVE_SERVICE","EDIT_SERVICE","CLEAR_SERVICE","CHANGE_SERVICE_FIELD","clearService","type","ServiceAdd","item","useSelector","state","serviceAdd","dispatch","useDispatch","handleChange","evt","target","name","value","payload","changeServiceField","onSubmit","price","preventDefault","onChange","onClick","ServiceList","items","serviceList","formState","handleRemove","id","find","el","removeService","handleEdit","n","EditService","map","o","App","Boolean","window","location","hostname","match","initialState","nanoid","reducer","combineReducers","action","i","Number","filter","service","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2436bc1c.chunk.js","sourcesContent":["export const ADD_SERVICE = 'ADD_SERVICE';\nexport const REMOVE_SERVICE = 'REMOVE_SERVICE';\nexport const EDIT_SERVICE = 'EDIT_SERVICE';\nexport const CLEAR_SERVICE = 'CLEAR_SERVICE';\nexport const CHANGE_SERVICE_FIELD = 'CHANGE_SERVICE_FIELD';","import { ADD_SERVICE, REMOVE_SERVICE, CHANGE_SERVICE_FIELD, EDIT_SERVICE, CLEAR_SERVICE } from './actionTypes';\n\nexport function addService(name, price) {\n  return {type: ADD_SERVICE, payload: {name, price}};\n}\n\nexport function removeService(id) {\n  return {type: REMOVE_SERVICE, payload: {id}};\n}\n\nexport function EditService(n, price) {\n  return {type: EDIT_SERVICE, payload: {n, price}};\n}\n\nexport function clearService() {\n  return {type: CLEAR_SERVICE};\n}\n\nexport function changeServiceField(name, value) {\n  return {type: CHANGE_SERVICE_FIELD, payload: {name, value}}\n}","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {changeServiceField, addService, clearService} from '../actions/actionCreators';\n\nfunction ServiceAdd() {\n\tconst item = useSelector(state => state.serviceAdd);\n\tconst dispatch = useDispatch();\n\n\tconst handleChange = evt => {\n\t\tconst {name, value} = evt.target;\n\t\tdispatch(changeServiceField(name, value));\n\t}\n\n\tconst handleSubmit = evt => {\n\t\t\tevt.preventDefault();\n\t\t\tdispatch(addService(item.name, item.price));\n\t}\n\n\tconst handleClear = (evt) => {\n\t\tevt.preventDefault();\n\t\tdispatch(clearService())\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input name='name' onChange={handleChange} value={item.name} />\n\t\t\t<input name='price' onChange={handleChange} value={item.price} />\n\t\t\t<button type='submit'>Save</button>\n\t\t\t<button onClick={handleClear}>Cancel</button>\n\t\t</form>\n\t);\n}\n\nexport default ServiceAdd;","import React from 'react'\nimport {useSelector, useDispatch} from 'react-redux';\nimport {removeService, EditService, clearService} from '../actions/actionCreators';\n\nfunction ServiceList() {\n  const items = useSelector(state => state.serviceList);\n  const formState = useSelector(state => state.serviceAdd);\n  const dispatch = useDispatch();\n\n  const handleRemove = id => {\n    // очищаем форму ввода если удаляем редактируемый элемент\n    if(formState.name===items.find((el)=>el.id===id).name)\n    {\n      dispatch(clearService());\n    }\n    dispatch(removeService(id));\n  }\n\n  const handleEdit = (name,price) => {\n    dispatch(EditService(name,price));\n  }\n\n  return (\n    <ul>\n      {items.map(o => (\n        <li key={o.id}>\n          {o.name} {o.price}\n          <button onClick={() => handleRemove(o.id)}>✕</button>\n          <button onClick={() => handleEdit(o.name, o.price)}>✎</button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default ServiceList","import React from 'react';\nimport ServiceAdd from './components/ServiceAdd';\nimport ServiceList from './components/ServiceList';\n\n\nfunction App() {\n  return (\n    <>\n      <ServiceAdd />\n      <ServiceList />\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import {nanoid} from 'nanoid';\nimport {ADD_SERVICE, REMOVE_SERVICE} from '../actions/actionTypes';\n\nconst initialState = [\n  {id: nanoid(), name: 'Замена стекла', price: 21000},\n  {id: nanoid(), name: 'Замена дисплея', price: 25000},\n];\n\nexport default function serviceListReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_SERVICE:\n      const {name, price} = action.payload;\n      if(state.find((el) => el.name===name))\n      {\n        return state.map((el,i) => {\n          if(el.name===name)\n          {\n            state[i].price=price;\n          }\n          return el;\n        })\n      }\n      else\n      {\n        return [...state, {id: nanoid(), name, price: Number(price)}];\n      }\n    case REMOVE_SERVICE:\n      const {id} = action.payload;\n      return state.filter(service => service.id !== id);\n    default:\n      return state;\n  }\n}","import {CHANGE_SERVICE_FIELD, CLEAR_SERVICE, EDIT_SERVICE} from '../actions/actionTypes'\n\nconst initialState = {\n  name: '',\n  price: '',\n};\n\nexport default function serviceAddReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_SERVICE_FIELD:\n      const {name, value} = action.payload;\n      return {...state, [name]: value};\n    case EDIT_SERVICE:\n      const {n, price} = action.payload;\n      return {name: n, price: price};\n    case CLEAR_SERVICE:\n      return {name: '', price: ''};\n    default:\n      return state;\n  }\n}","import { createStore, combineReducers } from \"redux\";\nimport serviceListReducer from '../reducers/serviceList';\nimport serviceAddReducer from '../reducers/serviceAdd';\n\nconst reducer = combineReducers({\n  serviceList: serviceListReducer,\n  serviceAdd: serviceAddReducer,\n});\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}